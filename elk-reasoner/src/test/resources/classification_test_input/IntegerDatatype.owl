Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(:=<http://www.semanticweb.org/Test.owl#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology(<http://www.semanticweb.org/Test.owl>

EquivalentClasses(DataHasValue(:dp "0"^^xsd:integer)		:_Zero1)
EquivalentClasses(DataHasValue(:dp "+0"^^xsd:integer)		:_Zero2)
EquivalentClasses(DataHasValue(:dp "-0"^^xsd:integer)		:_Zero3)

EquivalentClasses(DataHasValue(:dp "10"^^xsd:integer)		:_Ten1)
EquivalentClasses(DataHasValue(:dp "+10"^^xsd:integer)		:_Ten2)
EquivalentClasses(DataHasValue(:dp "-10"^^xsd:integer)		:_Ten3)

EquivalentClasses(:Integer_Larger_Or_Equal_Than_10 	DataSomeValuesFrom(:dp DatatypeRestriction(xsd:integer xsd:minInclusive "10"^^xsd:integer)))
EquivalentClasses(:Integer_Larger_Than_10 		DataSomeValuesFrom(:dp DatatypeRestriction(xsd:integer xsd:minExclusive "10"^^xsd:integer)))
EquivalentClasses(:Integer_Less_Or_Equal_Than10 	DataSomeValuesFrom(:dp DatatypeRestriction(xsd:integer xsd:maxInclusive "10"^^xsd:integer)))
EquivalentClasses(:Integer_LessThan10 			DataSomeValuesFrom(:dp DatatypeRestriction(xsd:integer xsd:maxExclusive "10"^^xsd:integer)))

EquivalentClasses(:Integers_Between_0_and_10_Ex 	DataSomeValuesFrom(:dp DatatypeRestriction(xsd:integer xsd:minExclusive "0"^^xsd:integer xsd:maxExclusive "10"^^xsd:integer)))
EquivalentClasses(:Integers_Between_0_and_10_Inc 	DataSomeValuesFrom(:dp DatatypeRestriction(xsd:integer xsd:minInclusive "0"^^xsd:integer xsd:maxInclusive "10"^^xsd:integer)))
EquivalentClasses(:Integers_Between_0_and_10_IncEx 	DataSomeValuesFrom(:dp DatatypeRestriction(xsd:integer xsd:minInclusive "0"^^xsd:integer xsd:maxExclusive "+10"^^xsd:integer)))
EquivalentClasses(:Integers_Between_0_and_10_ExInc 	DataSomeValuesFrom(:dp DatatypeRestriction(xsd:integer xsd:minExclusive "0"^^xsd:integer xsd:maxInclusive "+10"^^xsd:integer)))

EquivalentClasses(:InconsistentInteger			DataSomeValuesFrom(:dp DatatypeRestriction(xsd:integer xsd:minExclusive "5"^^xsd:integer xsd:maxExclusive "0"^^xsd:integer)))
)