<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>elk-parent</artifactId>
		<groupId>org.semanticweb.elk</groupId>
		<version>0.2.1-SNAPSHOT</version>
	</parent>

	<artifactId>elk-distribution</artifactId>
	<packaging>pom</packaging>

	<name>ELK Distribution</name>
	<description>The module for packaging of ELK products and their distribution</description>

	<dependencies>
		<dependency>
			<groupId>org.semanticweb.elk</groupId>
			<artifactId>elk-standalone</artifactId>
			<version>0.2.1-SNAPSHOT</version>
			<type>jar</type>
		</dependency>
		<dependency>
			<groupId>org.semanticweb.elk</groupId>
			<artifactId>elk-protege</artifactId>
			<version>0.2.1-SNAPSHOT</version>
			<type>jar</type>
		</dependency>
		<dependency>
			<groupId>org.semanticweb.elk</groupId>
			<artifactId>elk-owlapi-standalone</artifactId>
			<version>0.2.1-SNAPSHOT</version>
			<type>jar</type>
			<classifier>bin</classifier>
		</dependency>
		<dependency>
			<groupId>org.semanticweb.elk</groupId>
			<artifactId>elk-owlapi-standalone</artifactId>
			<version>0.2.1-SNAPSHOT</version>
			<type>jar</type>
			<classifier>src</classifier>
		</dependency>
		<dependency>
			<groupId>org.semanticweb.elk</groupId>
			<artifactId>elk-owlapi-standalone</artifactId>
			<version>0.2.1-SNAPSHOT</version>
			<type>jar</type>
			<classifier>lib</classifier>
		</dependency>
	</dependencies>

	<properties>
		<elk-standalone.base>elk-standalone</elk-standalone.base>
		<elk-protege.base>org.semanticweb.elk</elk-protege.base>
		<elk-owlapi.base>elk-owlapi</elk-owlapi.base>
		<!-- the base name of the zip file for elk-standalone distribution -->
		<elk-standalone-zip.base>
			${elk-standalone.base}-${project.version}
		</elk-standalone-zip.base>
		<!-- the base name of the zip file for elk-protege distribution -->
		<elk-protege-zip.base>
			elk-protege-${project.version}
		</elk-protege-zip.base>
		<!-- the base name of the zip file for elk-owlapi distribution -->
		<elk-owlapi-zip.base>
			${elk-owlapi.base}-${project.version}
		</elk-owlapi-zip.base>
		<!-- the following timestamp and release.version properties are used for 
			the current release information changes.xml file -->
		<maven.build.timestamp.format>yyyy-MM-dd</maven.build.timestamp.format>
		<buildDate>${maven.build.timestamp}</buildDate>
		<release.version>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}</release.version>
	</properties>

	<build>
		<plugins>
			<plugin>
				<!-- the plugin used to generate the modified plugin versions, such as 
					release.version used templates/*.vm and parsedVersion.osgiVersion used in 
					src/main/update.properties -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>parse-version</id>
						<goals>
							<goal>parse-version</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- the plugin to filter files by expanding the defined properties with 
					their values; the expanded versions are copied to the target -->
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.5</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<resources>
								<resource>
									<!-- filtering of the update.properties and version-info.txt files 
										used for Protege 4 auto-update feature -->
									<directory>${basedir}/src/main/resources/protege</directory>
									<filtering>true</filtering>
									<includes>
										<include>update.properties</include>
										<include>version-info.txt</include>
									</includes>
								</resource>
								<resource>
									<!-- filtering of the changes.xml file -->
									<directory>${basedir}/src/changes</directory>
									<filtering>true</filtering>
									<includes>
										<include>changes.xml</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- the plugin to generate changes log and release announcements -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-changes-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<!-- the changes filtered source changes file -->
					<xmlPath>${basedir}/target/changes.xml</xmlPath>
					<templateDirectory>templates</templateDirectory>
				</configuration>
				<executions>
					<execution>
						<!-- checking if the changes file is well-formed -->
						<id>check-changes</id>
						<phase>verify</phase>
						<goals>
							<goal>changes-check</goal>
						</goals>
					</execution>
					<execution>
						<!-- generating of the Changes.txt file -->
						<id>generate-changes-file</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>announcement-generate</goal>
						</goals>
						<configuration>
							<announcementFile>Changes.txt</announcementFile>
							<template>changes.vm</template>
							<outputDirectory>${project.build.directory}</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<!-- generation of the version-info.txt file for Protege 4 auto-update 
							feature -->
						<id>generate-protege-version-info</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>announcement-generate</goal>
						</goals>
						<configuration>
							<announcementFile>version-info.txt</announcementFile>
							<template>version-info.vm</template>
							<outputDirectory>${project.build.directory}</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<!-- generation of the e-mail announcement message announcement.txt -->
						<id>generate-email-announcement</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>announcement-generate</goal>
						</goals>
						<configuration>
							<announcementFile>announcement.txt</announcementFile>
							<template>announcement.vm</template>
							<outputDirectory>${project.build.directory}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- the plugin for assembling of the distribution zip files -->
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<!-- creating the distribution archive for elk-standalone -->
						<id>create-standalone-zip</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>${elk-standalone-zip.base}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<!-- configuration file describing how to create the archive -->
								<descriptor>${basedir}/src/main/assembly/standalone-zip.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
					<execution>
						<!-- creating the distribution archive for elk-protege -->
						<id>create-protege-zip</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>${elk-protege-zip.base}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<!-- configuration file describing how to create the archive -->
								<descriptor>${basedir}/src/main/assembly/protege-zip.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
					<execution>
						<!-- creating the distribution archive for elk-owlapi-standalone -->
						<id>create-owlapi-zip</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>${elk-owlapi-zip.base}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<!-- configuration file describing how to create the archive -->
								<descriptor>${basedir}/src/main/assembly/owlapi-zip.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- the plugin used to upload the release files to googlecode -->
				<groupId>com.googlecode.maven-gcu-plugin</groupId>
				<artifactId>maven-gcu-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<phase>deploy</phase>
						<goals>
							<goal>upload</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- the server and access credentials should be defined in the maven 
						user configuration file (usually ~/.m2/settings.xml) -->
					<serverId>elk-reasoner.googlecode.com</serverId>
					<failsOnError>true</failsOnError>
					<projectName>elk-reasoner</projectName>
					<uploads>
						<upload>
							<file>${project.build.directory}/${elk-standalone-zip.base}.zip</file>
							<summary>ELK reasoner standalone executable version ${project.version}</summary>
							<labels>
								<label>Featured</label>
								<label>OpSys-All</label>
								<label>Type-Archive</label>
							</labels>
						</upload>
						<upload>
							<file>${project.build.directory}/${elk-protege-zip.base}.zip</file>
							<summary>ELK reasoner Protege plugin version ${project.version}</summary>
							<labels>
								<label>Featured</label>
								<label>OpSys-All</label>
								<label>Type-Archive</label>
							</labels>
						</upload>
						<upload>
							<file>${project.build.directory}/${elk-owlapi-zip.base}.zip</file>
							<summary>ELK reasoner library for OWL API version ${project.version}</summary>
							<labels>
								<label>Featured</label>
								<label>OpSys-All</label>
								<label>Type-Archive</label>
							</labels>
						</upload>
					</uploads>
				</configuration>
			</plugin>
			<plugin>
				<!-- the plugin for manipulating with Source Control Management (SCM) 
					systems -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>wagon-maven-plugin</artifactId>
				<version>1.0-beta-3</version>
				<dependencies>
					<dependency>
						<!-- the subversion SCM plugin -->
						<groupId>com.google.code.maven-svn-wagon</groupId>
						<artifactId>maven-svn-wagon</artifactId>
						<version>1.4</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<!-- uploading the following files during the project deployment phase -->
						<phase>deploy</phase>
						<goals>
							<goal>upload</goal>
						</goals>
						<configuration>
							<!-- the server and access credentials should be defined in the maven 
								user configuration file (usually ~/.m2/settings.xml) -->
							<serverId>elk-reasoner.googlecode.com</serverId>
							<fromDir>${basedir}/target</fromDir>
							<includes>update.properties,version-info.txt</includes>
							<!-- uploading the update.properties and version-info.txt files to 
								the resources folder of the googlecode svn -->
							<url>svn:https://elk-reasoner.googlecode.com/svn/resources/elk-reasoner</url>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<!-- the plugin to generate changes log and release announcements -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-changes-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<!-- the changes filtered source changes file -->
					<xmlPath>${basedir}/target/changes.xml</xmlPath>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

</project>
